import torch as th
import torch.nn.functional as F
import torch.nn as nn


class UNetDiscriminatorSN(th.nn.Module):
    """U-Net discriminator with spectral normalization.
    Adapted from Real-ESRGAN [Wang 2021]
    """

    def __init__(
        self,
        input_dim: int = 3,
        channels_dim: int = 16,
        skip_connection: bool = True,
        Low_dim=False,
        lessskip=False,
        lowres=False,
    ):
        super().__init__()
        self.skip_connection = skip_connection
        norm = th.nn.utils.spectral_norm
        self.low_dim = Low_dim
        self.lessskip = lessskip
        self.lowres = lowres
        if self.lessskip and self.skip_connection:
            print("Use less skip!!")
        self.conv0 = th.nn.Conv2d(
            input_dim, channels_dim, kernel_size=3, stride=1, padding=1
        )
        if self.lowres:
            
            self.conv1 = norm(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 2, 1, bias=False)
            )
        else:            
            self.conv1 = norm(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 4, 1, bias=False)
            )
            
        self.conv2 = norm(
            th.nn.Conv2d(channels_dim * 2, channels_dim * 4, 4, 4, 1, bias=False)
        )
        self.conv3 = norm(
            th.nn.Conv2d(channels_dim * 4, channels_dim * 8, 4, 4, 1, bias=False)
        )
        if self.low_dim:
            print("Using Low dim!")
            self.conv3_1 = norm(
                th.nn.Conv2d(channels_dim * 8, channels_dim * 16, 4, 2, 1, bias=False)
            )
            self.conv3_2 = norm(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 32, 4, 2, 1, bias=False)
            )

            self.conv3_3 = norm(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 64, 4, 2, 1, bias=False)
            )

            # upsample

            self.conv4_1 = norm(
                th.nn.Conv2d(channels_dim * 64, channels_dim * 32, 3, 1, 1, bias=False)
            )
            self.conv4_2 = norm(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 16, 3, 1, 1, bias=False)
            )
            self.conv4_3 = norm(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 8, 3, 1, 1, bias=False)
            )

        self.conv4 = norm(
            th.nn.Conv2d(channels_dim * 8, channels_dim * 4, 3, 1, 1, bias=False)
        )
        self.conv5 = norm(
            th.nn.Conv2d(channels_dim * 4, channels_dim * 2, 3, 1, 1, bias=False)
        )
        self.conv6 = norm(
            th.nn.Conv2d(channels_dim * 2, channels_dim, 3, 1, 1, bias=False)
        )

        # extra
        self.conv7 = norm(th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False))
        self.conv8 = norm(th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False))

        self.conv9 = th.nn.Conv2d(channels_dim, 1, 3, 1, 1)

    def forward(self, x):
        if self.low_dim:
            x = x.contiguous()  # fixes an issue when x is generated by a unet
            x0 = F.leaky_relu(self.conv0(x), negative_slope=0.2, inplace=True)
            x1 = F.leaky_relu(self.conv1(x0), negative_slope=0.2, inplace=True)
            x2 = F.leaky_relu(self.conv2(x1), negative_slope=0.2, inplace=True)
            x3 = F.leaky_relu(self.conv3(x2), negative_slope=0.2, inplace=True)
            x3_1 = F.leaky_relu(self.conv3_1(x3), negative_slope=0.2, inplace=True)
            x3_2 = F.leaky_relu(self.conv3_2(x3_1), negative_slope=0.2, inplace=True)
            x3_3 = F.leaky_relu(self.conv3_3(x3_2), negative_slope=0.2, inplace=True)

            x3_3 = F.interpolate(
                x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
            )

            x3_4 = F.leaky_relu(self.conv4_1(x3_3), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                x3_4 = x3_4 + x3_2

            x3_4 = F.interpolate(
                x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
            )
            x3_5 = F.leaky_relu(self.conv4_2(x3_4), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                x3_5 = x3_5 + x3_1

            x3_5 = F.interpolate(
                x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
            )
            x3_6 = F.leaky_relu(self.conv4_3(x3_5), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                if self.lessskip:
                    pass
                else:
                    x3_6 = x3_6 + x3
                # pass
            # upsample
            x3 = F.interpolate(
                x3_6, size=x2.shape[-2:], mode="bilinear", align_corners=False
            )
            # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
            x4 = F.leaky_relu(self.conv4(x3), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                # x4 = x4 + x2
                pass

            x4 = F.interpolate(
                x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
            )
            # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.leaky_relu(self.conv5(x4), negative_slope=0.2, inplace=True)
            if self.skip_connection:
                # x5 = x5 + x1
                pass
            # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.interpolate(
                x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
            )
            x6 = F.leaky_relu(self.conv6(x5), negative_slope=0.2, inplace=True)
            if self.skip_connection:
                # x6 = x6 + x0
                pass
            # extra
            out = F.leaky_relu(self.conv7(x6), negative_slope=0.2, inplace=True)
            out = F.leaky_relu(self.conv8(out), negative_slope=0.2, inplace=True)
            out = self.conv9(out)

            return out

        else:
            x = x.contiguous()  # fixes an issue when x is generated by a unet
            x0 = F.leaky_relu(self.conv0(x), negative_slope=0.2, inplace=True)
            x1 = F.leaky_relu(self.conv1(x0), negative_slope=0.2, inplace=True)
            x2 = F.leaky_relu(self.conv2(x1), negative_slope=0.2, inplace=True)
            x3 = F.leaky_relu(self.conv3(x2), negative_slope=0.2, inplace=True)

            # upsample
            x3 = F.interpolate(
                x3, size=x2.shape[-2:], mode="bilinear", align_corners=False
            )
            # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
            x4 = F.leaky_relu(self.conv4(x3), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                x4 = x4 + x2
            x4 = F.interpolate(
                x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
            )
            # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.leaky_relu(self.conv5(x4), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                x5 = x5 + x1
            # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.interpolate(
                x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
            )
            x6 = F.leaky_relu(self.conv6(x5), negative_slope=0.2, inplace=True)

            if self.skip_connection:
                x6 = x6 + x0

            # extra
            out = F.leaky_relu(self.conv7(x6), negative_slope=0.2, inplace=True)
            out = F.leaky_relu(self.conv8(out), negative_slope=0.2, inplace=True)
            out = self.conv9(out)

            return out


class UNet_mask(th.nn.Module):
    """U-Net"""

    def __init__(
        self,
        input_dim: int = 3,
        channels_dim: int = 32,
        skip_connection: bool = True,
        Low_dim=False,
        brush=False,
        nosig=False,
        onlyupsample=False,
        maskoffset=0.5,
        maskconvkernel=1,
        swap=False,
        aggupsample=False,
        outputdim=1,
        lowres=False,
    ):
        super().__init__()
        self.skip_connection = skip_connection
        self.lowres = lowres
        # norm = th.nn.BatchNorm2d
        self.brush = brush
        self.nosig = nosig
        self.onlyupsample = onlyupsample
        self.aggupsampe = aggupsample
        if self.onlyupsample and self.aggupsampe:
            print("Use Aggressive Upsampling!")
        self.low_dim = Low_dim
        self.maskoffset = maskoffset
        self.swap = swap
        print("Swap status: ", self.swap)

        print("Mask off set: %f" % (self.maskoffset))

        self.maskconvkernel = maskconvkernel
        print("mask kernel: %d" % (self.maskconvkernel))
        self.conv0 = th.nn.Conv2d(
            input_dim, channels_dim, kernel_size=3, stride=1, padding=1
        )

        if self.lowres:
            self.conv1 = nn.Sequential(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 2),
            )
        else:
            self.conv1 = nn.Sequential(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 4, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 2),
            )
        self.conv2 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 2, channels_dim * 4, 4, 4, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 4),
        )
        if self.swap:
            self.conv3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 4, channels_dim * 8, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )
        else:
            self.conv3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 4, channels_dim * 8, 4, 4, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )
        if self.low_dim:
            print("Using Low dim!")
            if self.swap:
                self.conv3_1 = nn.Sequential(
                    th.nn.Conv2d(
                        channels_dim * 8, channels_dim * 16, 4, 4, 1, bias=False
                    ),
                    th.nn.BatchNorm2d(channels_dim * 16),
                )
            else:
                self.conv3_1 = nn.Sequential(
                    th.nn.Conv2d(
                        channels_dim * 8, channels_dim * 16, 4, 2, 1, bias=False
                    ),
                    th.nn.BatchNorm2d(channels_dim * 16),
                )
            self.conv3_2 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 32, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 32),
            )

            self.conv3_3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 64, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 64),
            )

            # upsample

            self.conv4_1 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 64, channels_dim * 32, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 32),
            )
            self.conv4_2 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 16, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 16),
            )
            self.conv4_3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 8, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )

        self.conv4 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 8, channels_dim * 4, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 4),
        )
        self.conv5 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 4, channels_dim * 2, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 2),
        )
        self.conv6 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 2, channels_dim, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 1),
        )

        # extra
        self.conv7 = nn.Sequential(
            th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False)
        )
        self.conv8 = nn.Sequential(
            th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False)
        )

        self.conv9 = th.nn.Conv2d(channels_dim, 1, 3, 1, 1)
        if self.onlyupsample:
            if self.maskconvkernel == 1:

                if self.aggupsampe:
                    self.conv_only = th.nn.Conv2d(channels_dim * 8, outputdim, 3, 1, 1)
                else:
                    self.conv_only = th.nn.Conv2d(channels_dim * 4, outputdim, 3, 1, 1)

            if self.maskconvkernel == 3:
                print("Conv kernel 3!")

                self.conv_only_pre1 = th.nn.Conv2d(
                    channels_dim * 4, channels_dim * 2, 3, 1, 1, bias=False
                )
                self.conv_only_pre2 = th.nn.Conv2d(
                    channels_dim * 2, channels_dim * 1, 3, 1, 1, bias=False
                )
                self.conv_only = th.nn.Conv2d(channels_dim, 1, 3, 1, 1)

    def forward(self, x):
        if self.low_dim:
            if self.brush:
                if self.onlyupsample:
                    x = x.contiguous()  # fixes an issue when x is generated by a unet
                    x0 = F.relu(self.conv0(x), inplace=True)
                    x1 = F.relu(self.conv1(x0), inplace=True)
                    x2 = F.relu(self.conv2(x1), inplace=True)
                    x3 = F.relu(self.conv3(x2), inplace=True)
                    x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                    x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                    x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                    x3_3 = F.interpolate(
                        x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                    )

                    x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                    if self.skip_connection:
                        x3_4 = x3_4 + x3_2

                    x3_4 = F.interpolate(
                        x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                    if self.skip_connection:
                        x3_5 = x3_5 + x3_1

                    x3_5 = F.interpolate(
                        x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                    if self.skip_connection:
                        x3_6 = x3_6 + x3
                    # upsample

                    if self.aggupsampe:
                        x4 = F.interpolate(
                            x3_6,
                            size=x0.shape[-2:],
                            mode="bicubic",
                            align_corners=False,
                        )
                    else:

                        x3 = F.interpolate(
                            x3_6,
                            size=x2.shape[-2:],
                            mode="bilinear",
                            align_corners=False,
                        )
                        # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                        x4 = F.relu(self.conv4(x3), inplace=True)

                        if self.skip_connection:
                            x4 = x4 + x2

                        x4 = F.interpolate(
                            x4, size=x0.shape[-2:], mode="bicubic", align_corners=False
                        )

                    # # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                    # x5 = F.relu(self.conv5(x4), inplace=True)
                    # # if self.skip_connection:
                    # #     x5 = x5 + x1
                    # # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                    # x5 = F.interpolate(
                    #     x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                    # )
                    # x6 = F.relu(self.conv6(x5), inplace=True)
                    # # if self.skip_connection:
                    # #     x6 = x6 + x0
                    # # extra
                    # out = F.relu(self.conv7(x6), inplace=True)
                    # out = F.relu(self.conv8(out), inplace=True)
                    if self.maskconvkernel == 1:
                        out = self.conv_only(x4)
                    if self.maskconvkernel == 3:
                        out = F.relu(self.conv_only_pre1(x4), inplace=True)
                        out = F.relu(self.conv_only_pre2(out), inplace=True)
                        out = self.conv_only(out)

                    if self.nosig:
                        return out
                    else:
                        return (
                            nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                        )
                else:
                    x = x.contiguous()  # fixes an issue when x is generated by a unet
                    x0 = F.relu(self.conv0(x), inplace=True)
                    x1 = F.relu(self.conv1(x0), inplace=True)
                    x2 = F.relu(self.conv2(x1), inplace=True)
                    x3 = F.relu(self.conv3(x2), inplace=True)
                    x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                    x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                    x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                    x3_3 = F.interpolate(
                        x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                    )

                    x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                    if self.skip_connection:
                        x3_4 = x3_4 + x3_2

                    x3_4 = F.interpolate(
                        x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                    if self.skip_connection:
                        x3_5 = x3_5 + x3_1

                    x3_5 = F.interpolate(
                        x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                    if self.skip_connection:
                        x3_6 = x3_6 + x3
                    # upsample
                    x3 = F.interpolate(
                        x3_6, size=x2.shape[-2:], mode="bilinear", align_corners=False
                    )
                    # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                    x4 = F.relu(self.conv4(x3), inplace=True)

                    # if self.skip_connection:
                    #     x4 = x4 + x2

                    x4 = F.interpolate(
                        x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                    x5 = F.relu(self.conv5(x4), inplace=True)
                    # if self.skip_connection:
                    #     x5 = x5 + x1
                    # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                    x5 = F.interpolate(
                        x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x6 = F.relu(self.conv6(x5), inplace=True)
                    # if self.skip_connection:
                    #     x6 = x6 + x0
                    # extra
                    out = F.relu(self.conv7(x6), inplace=True)
                    out = F.relu(self.conv8(out), inplace=True)
                    out = self.conv9(out)
                    if self.nosig:
                        return out
                    else:
                        return (
                            nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                        )

            else:
                # print("ALL")
                x = x.contiguous()  # fixes an issue when x is generated by a unet
                x0 = F.relu(self.conv0(x), inplace=True)
                x1 = F.relu(self.conv1(x0), inplace=True)
                x2 = F.relu(self.conv2(x1), inplace=True)
                x3 = F.relu(self.conv3(x2), inplace=True)
                x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                x3_3 = F.interpolate(
                    x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                )

                x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                if self.skip_connection:
                    x3_4 = x3_4 + x3_2

                x3_4 = F.interpolate(
                    x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                )
                x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                if self.skip_connection:
                    x3_5 = x3_5 + x3_1

                x3_5 = F.interpolate(
                    x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                )
                x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                if self.skip_connection:
                    x3_6 = x3_6 + x3
                # upsample
                x3 = F.interpolate(
                    x3_6, size=x2.shape[-2:], mode="bilinear", align_corners=False
                )
                # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                x4 = F.relu(self.conv4(x3), inplace=True)

                if self.skip_connection:
                    x4 = x4 + x2

                x4 = F.interpolate(
                    x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
                )
                # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                x5 = F.relu(self.conv5(x4), inplace=True)
                if self.skip_connection:
                    x5 = x5 + x1
                # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                x5 = F.interpolate(
                    x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                )
                x6 = F.relu(self.conv6(x5), inplace=True)
                if self.skip_connection:
                    x6 = x6 + x0
                # extra
                out = F.relu(self.conv7(x6), inplace=True)
                out = F.relu(self.conv8(out), inplace=True)
                out = self.conv9(out)

                if self.nosig:
                    return out
                else:
                    return (
                        nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                    )

        else:
            x = x.contiguous()  # fixes an issue when x is generated by a unet
            x0 = F.relu(self.conv0(x), inplace=True)
            x1 = F.relu(self.conv1(x0), inplace=True)
            x2 = F.relu(self.conv2(x1), inplace=True)
            x3 = F.relu(self.conv3(x2), inplace=True)

            # upsample
            x3 = F.interpolate(
                x3, size=x2.shape[-2:], mode="bilinear", align_corners=False
            )
            # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
            x4 = F.relu(self.conv4(x3), inplace=True)

            if self.skip_connection:
                x4 = x4 + x2
            x4 = F.interpolate(
                x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
            )
            # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.relu(self.conv5(x4), inplace=True)

            if self.skip_connection:
                x5 = x5 + x1
            # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.interpolate(
                x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
            )
            x6 = F.relu(self.conv6(x5), inplace=True)

            if self.skip_connection:
                x6 = x6 + x0

            # extra
            out = F.relu(self.conv7(x6), inplace=True)
            out = F.relu(self.conv8(out), inplace=True)
            out = self.conv9(out)

            return out
        
        
        
        
        
class UNet_mask_light(th.nn.Module):
    """U-Net"""

    def __init__(
        self,
        input_dim: int = 3,
        channels_dim: int = 8,
        skip_connection: bool = True,
        Low_dim=False,
        brush=False,
        nosig=False,
        onlyupsample=False,
        maskoffset=0.5,
        maskconvkernel=1,
        swap=False,
        aggupsample=False,
        outputdim=1,
        lowres=False,
    ):
        super().__init__()
        self.skip_connection = skip_connection
        self.lowres = lowres
        # norm = th.nn.BatchNorm2d
        self.brush = brush
        self.nosig = nosig
        self.onlyupsample = onlyupsample
        self.aggupsampe = aggupsample
        if self.onlyupsample and self.aggupsampe:
            print("Use Aggressive Upsampling!")
        self.low_dim = Low_dim
        self.maskoffset = maskoffset
        self.swap = swap
        print("Swap status: ", self.swap)

        print("Mask off set: %f" % (self.maskoffset))

        self.maskconvkernel = maskconvkernel
        print("mask kernel: %d" % (self.maskconvkernel))
        self.conv0 = th.nn.Conv2d(
            input_dim, channels_dim, kernel_size=3, stride=1, padding=1
        )

        if self.lowres:
            self.conv1 = nn.Sequential(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 2),
            )
        else:
            self.conv1 = nn.Sequential(
                th.nn.Conv2d(channels_dim, channels_dim * 2, 4, 4, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 2),
            )
        self.conv2 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 2, channels_dim * 4, 4, 4, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 4),
        )
        if self.swap:
            self.conv3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 4, channels_dim * 8, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )
        else:
            self.conv3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 4, channels_dim * 8, 4, 4, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )
        if self.low_dim:
            print("Using Low dim!")
            if self.swap:
                self.conv3_1 = nn.Sequential(
                    th.nn.Conv2d(
                        channels_dim * 8, channels_dim * 16, 4, 4, 1, bias=False
                    ),
                    th.nn.BatchNorm2d(channels_dim * 16),
                )
            else:
                self.conv3_1 = nn.Sequential(
                    th.nn.Conv2d(
                        channels_dim * 8, channels_dim * 16, 4, 2, 1, bias=False
                    ),
                    th.nn.BatchNorm2d(channels_dim * 16),
                )
            self.conv3_2 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 32, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 32),
            )

            self.conv3_3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 64, 4, 2, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 64),
            )

            # upsample

            self.conv4_1 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 64, channels_dim * 32, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 32),
            )
            self.conv4_2 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 32, channels_dim * 16, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 16),
            )
            self.conv4_3 = nn.Sequential(
                th.nn.Conv2d(channels_dim * 16, channels_dim * 8, 3, 1, 1, bias=False),
                th.nn.BatchNorm2d(channels_dim * 8),
            )

        self.conv4 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 8, channels_dim * 4, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 4),
        )
        self.conv5 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 4, channels_dim * 2, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 2),
        )
        self.conv6 = nn.Sequential(
            th.nn.Conv2d(channels_dim * 2, channels_dim, 3, 1, 1, bias=False),
            th.nn.BatchNorm2d(channels_dim * 1),
        )

        # extra
        self.conv7 = nn.Sequential(
            th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False)
        )
        self.conv8 = nn.Sequential(
            th.nn.Conv2d(channels_dim, channels_dim, 3, 1, 1, bias=False)
        )

        self.conv9 = th.nn.Conv2d(channels_dim, 1, 3, 1, 1)
        if self.onlyupsample:
            if self.maskconvkernel == 1:

                if self.aggupsampe:
                    self.conv_only = th.nn.Conv2d(channels_dim * 8, outputdim, 3, 1, 1)
                else:
                    self.conv_only = th.nn.Conv2d(channels_dim * 4, outputdim, 3, 1, 1)

            if self.maskconvkernel == 3:
                print("Conv kernel 3!")

                self.conv_only_pre1 = th.nn.Conv2d(
                    channels_dim * 4, channels_dim * 2, 3, 1, 1, bias=False
                )
                self.conv_only_pre2 = th.nn.Conv2d(
                    channels_dim * 2, channels_dim * 1, 3, 1, 1, bias=False
                )
                self.conv_only = th.nn.Conv2d(channels_dim, 1, 3, 1, 1)

    def forward(self, x):
        if self.low_dim:
            if self.brush:
                if self.onlyupsample:
                    x = x.contiguous()  # fixes an issue when x is generated by a unet
                    x0 = F.relu(self.conv0(x), inplace=True)
                    x1 = F.relu(self.conv1(x0), inplace=True)
                    x2 = F.relu(self.conv2(x1), inplace=True)
                    x3 = F.relu(self.conv3(x2), inplace=True)
                    x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                    x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                    x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                    x3_3 = F.interpolate(
                        x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                    )

                    x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                    if self.skip_connection:
                        x3_4 = x3_4 + x3_2

                    x3_4 = F.interpolate(
                        x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                    if self.skip_connection:
                        x3_5 = x3_5 + x3_1

                    x3_5 = F.interpolate(
                        x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                    if self.skip_connection:
                        x3_6 = x3_6 + x3
                    # upsample

                    if self.aggupsampe:
                        x4 = F.interpolate(
                            x3_6,
                            size=x0.shape[-2:],
                            mode="bicubic",
                            align_corners=False,
                        )
                    else:

                        x3 = F.interpolate(
                            x3_6,
                            size=x2.shape[-2:],
                            mode="bilinear",
                            align_corners=False,
                        )
                        # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                        x4 = F.relu(self.conv4(x3), inplace=True)

                        if self.skip_connection:
                            x4 = x4 + x2

                        x4 = F.interpolate(
                            x4, size=x0.shape[-2:], mode="bicubic", align_corners=False
                        )

                    # # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                    # x5 = F.relu(self.conv5(x4), inplace=True)
                    # # if self.skip_connection:
                    # #     x5 = x5 + x1
                    # # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                    # x5 = F.interpolate(
                    #     x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                    # )
                    # x6 = F.relu(self.conv6(x5), inplace=True)
                    # # if self.skip_connection:
                    # #     x6 = x6 + x0
                    # # extra
                    # out = F.relu(self.conv7(x6), inplace=True)
                    # out = F.relu(self.conv8(out), inplace=True)
                    if self.maskconvkernel == 1:
                        out = self.conv_only(x4)
                    if self.maskconvkernel == 3:
                        out = F.relu(self.conv_only_pre1(x4), inplace=True)
                        out = F.relu(self.conv_only_pre2(out), inplace=True)
                        out = self.conv_only(out)

                    if self.nosig:
                        return out
                    else:
                        return (
                            nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                        )
                else:
                    x = x.contiguous()  # fixes an issue when x is generated by a unet
                    x0 = F.relu(self.conv0(x), inplace=True)
                    x1 = F.relu(self.conv1(x0), inplace=True)
                    x2 = F.relu(self.conv2(x1), inplace=True)
                    x3 = F.relu(self.conv3(x2), inplace=True)
                    x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                    x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                    x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                    x3_3 = F.interpolate(
                        x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                    )

                    x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                    if self.skip_connection:
                        x3_4 = x3_4 + x3_2

                    x3_4 = F.interpolate(
                        x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                    if self.skip_connection:
                        x3_5 = x3_5 + x3_1

                    x3_5 = F.interpolate(
                        x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                    if self.skip_connection:
                        x3_6 = x3_6 + x3
                    # upsample
                    x3 = F.interpolate(
                        x3_6, size=x2.shape[-2:], mode="bilinear", align_corners=False
                    )
                    # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                    x4 = F.relu(self.conv4(x3), inplace=True)

                    # if self.skip_connection:
                    #     x4 = x4 + x2

                    x4 = F.interpolate(
                        x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
                    )
                    # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                    x5 = F.relu(self.conv5(x4), inplace=True)
                    # if self.skip_connection:
                    #     x5 = x5 + x1
                    # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                    x5 = F.interpolate(
                        x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                    )
                    x6 = F.relu(self.conv6(x5), inplace=True)
                    # if self.skip_connection:
                    #     x6 = x6 + x0
                    # extra
                    out = F.relu(self.conv7(x6), inplace=True)
                    out = F.relu(self.conv8(out), inplace=True)
                    out = self.conv9(out)
                    if self.nosig:
                        return out
                    else:
                        return (
                            nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                        )

            else:
                # print("ALL")
                x = x.contiguous()  # fixes an issue when x is generated by a unet
                x0 = F.relu(self.conv0(x), inplace=True)
                x1 = F.relu(self.conv1(x0), inplace=True)
                x2 = F.relu(self.conv2(x1), inplace=True)
                x3 = F.relu(self.conv3(x2), inplace=True)
                x3_1 = F.relu(self.conv3_1(x3), inplace=True)
                x3_2 = F.relu(self.conv3_2(x3_1), inplace=True)
                x3_3 = F.relu(self.conv3_3(x3_2), inplace=True)

                x3_3 = F.interpolate(
                    x3_3, size=x3_2.shape[-2:], mode="bilinear", align_corners=False
                )

                x3_4 = F.relu(self.conv4_1(x3_3), inplace=True)

                if self.skip_connection:
                    x3_4 = x3_4 + x3_2

                x3_4 = F.interpolate(
                    x3_4, size=x3_1.shape[-2:], mode="bilinear", align_corners=False
                )
                x3_5 = F.relu(self.conv4_2(x3_4), inplace=True)

                if self.skip_connection:
                    x3_5 = x3_5 + x3_1

                x3_5 = F.interpolate(
                    x3_5, size=x3.shape[-2:], mode="bilinear", align_corners=False
                )
                x3_6 = F.relu(self.conv4_3(x3_5), inplace=True)

                if self.skip_connection:
                    x3_6 = x3_6 + x3
                # upsample
                x3 = F.interpolate(
                    x3_6, size=x2.shape[-2:], mode="bilinear", align_corners=False
                )
                # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
                x4 = F.relu(self.conv4(x3), inplace=True)

                if self.skip_connection:
                    x4 = x4 + x2

                x4 = F.interpolate(
                    x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
                )
                # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
                x5 = F.relu(self.conv5(x4), inplace=True)
                if self.skip_connection:
                    x5 = x5 + x1
                # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
                x5 = F.interpolate(
                    x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
                )
                x6 = F.relu(self.conv6(x5), inplace=True)
                if self.skip_connection:
                    x6 = x6 + x0
                # extra
                out = F.relu(self.conv7(x6), inplace=True)
                out = F.relu(self.conv8(out), inplace=True)
                out = self.conv9(out)

                if self.nosig:
                    return out
                else:
                    return (
                        nn.Sigmoid()(out) * (1 - self.maskoffset) + self.maskoffset
                    )

        else:
            x = x.contiguous()  # fixes an issue when x is generated by a unet
            x0 = F.relu(self.conv0(x), inplace=True)
            x1 = F.relu(self.conv1(x0), inplace=True)
            x2 = F.relu(self.conv2(x1), inplace=True)
            x3 = F.relu(self.conv3(x2), inplace=True)

            # upsample
            x3 = F.interpolate(
                x3, size=x2.shape[-2:], mode="bilinear", align_corners=False
            )
            # x3 = F.interpolate(x3, scale_factor=2, mode="bilinear", align_corners=False)
            x4 = F.relu(self.conv4(x3), inplace=True)

            if self.skip_connection:
                x4 = x4 + x2
            x4 = F.interpolate(
                x4, size=x1.shape[-2:], mode="bilinear", align_corners=False
            )
            # x4 = F.interpolate(x4, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.relu(self.conv5(x4), inplace=True)

            if self.skip_connection:
                x5 = x5 + x1
            # x5 = F.interpolate(x5, scale_factor=2, mode="bilinear", align_corners=False)
            x5 = F.interpolate(
                x5, size=x0.shape[-2:], mode="bilinear", align_corners=False
            )
            x6 = F.relu(self.conv6(x5), inplace=True)

            if self.skip_connection:
                x6 = x6 + x0

            # extra
            out = F.relu(self.conv7(x6), inplace=True)
            out = F.relu(self.conv8(out), inplace=True)
            out = self.conv9(out)

            return out
